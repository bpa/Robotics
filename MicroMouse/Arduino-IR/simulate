#! /usr/bin/env perl6

use lib 'lib';
use NativeCall;
use SDL2;
use SDL2::Raw;
use SDL2::TTF;
use SDL2::Image;
use Cairo;
use nqp;
use Maze;
use Maze::SDL;
use Maze::SDF;
use Mouse;

constant W = 640;
constant H = 640;

TTF_Init();
my $font = TTF_OpenFont("FreeSans.ttf", 24);
if (!$font)
{
  note "TTF_OpenFont() Failed: ", SDL_GetError();
  TTF_Quit();
  SDL_Quit();
  exit(1);
}

if (IMG_Init( IMG_INIT_PNG ) +& IMG_INIT_PNG) == 0 {
    say "SDL_image could not be initialized SDL_image Error: %s\n", SDL_GetError()
}

SDL_Init(VIDEO);
my $window = SDL_CreateWindow("MicroMouse",
        SDL_WINDOWPOS_CENTERED_MASK, SDL_WINDOWPOS_CENTERED_MASK,
        W, H,
        OPENGL);
my $render = SDL_CreateRenderer($window, -1, ACCELERATED +| PRESENTVSYNC);

my $black = SDL_Color.new(255);

my $text = TTF_Text($render, $font, "Hello?", $black);

my $event = SDL_Event.new;

enum GAME_KEYS (
    K_UP    => 82,
    K_DOWN  => 81,
    K_LEFT  => 80,
    K_RIGHT => 79,
    K_SPACE => 44,
    K_ESC   => 41,
    K_S     => 22,
    K_REFRESH => 62,
);

my %down_keys;
my @walls = generate_maze();
my $width = Int(600/@walls.end);
my $maze = MazeRenderer.new(20, 20, $width, @walls);
my $mouse = Mouse.new(:$render, :x(20), :y(20), :$width, :@walls);

main: loop {
    while SDL_PollEvent($event) {
        my $casted_event = SDL_CastEvent($event);

        given $casted_event {
            when *.type == QUIT {
                last main;
            }
            when *.type == KEYDOWN {
                if GAME_KEYS(.scancode) -> $comm {
                    %down_keys{$comm} = 1;
                } else { say "new keycode found: $_.scancode()"; }

                CATCH { say $_ }
            }
            when *.type == KEYUP {
                if GAME_KEYS(.scancode) -> $comm {
                    %down_keys{$comm} = 0;
                } else { say "new keycode found: $_.scancode()"; }

                CATCH { say $_ }
            }
        }
    }

    if %down_keys<K_ESC> {
		last main;
    }
    elsif %down_keys<K_REFRESH> {
        @walls = generate_maze();
        $maze = MazeRenderer.new(20, 20, $width, @walls);
        $mouse = Mouse.new(:$render, :x(20), :y(20), :$width, :@walls);
    }
    elsif %down_keys<K_S> {
        write_maze(@walls);
    }

    SDL_SetRenderDrawColor($render, 0, 0, 0, 0);
    SDL_RenderClear($render);
	$maze.render($render);
    $mouse.render;
    SDL_RenderPresent($render);

    sleep(1 / 50);
}

TTF_Quit();
SDL_Quit();
